

let video;
let poseNet;
let poses = [];
let score = 0
let punchingbagX = 100
let img;
let state = 0;

function setup() {
  createCanvas(640, 480);
  video = createCapture(VIDEO);
  video.size(width, height);
  img = loadImage('http://www.pngall.com/wp-content/uploads/2017/01/Punching-Bag-Download-PNG.png');

  // Create a new poseNet method with a single detection
  poseNet = ml5.poseNet(video, modelReady);
  // This sets up an event that fills the global variable "poses"
  // with an array every time new poses are detected
  poseNet.on('pose', function(results) {
    poses = results;
  });
  // Hide the video element, and just show the canvas
  video.hide();
}

function modelReady() {
  select('#status').html('Model Loaded');
}

function draw() {
  image(video, 0, 0, width, height);
  noStroke();
  fill(0, 255, 0);
  textSize(24);
  text("Score: " + score, 100, 100);
  

  // We can call both functions to draw all keypoints and the skeletons
  drawPunchingBag();
  drawSkeleton();
}


// A function to draw ellipses over the detected keypoints
function drawPunchingBag() {
  noStroke();
  fill(0, 0, 255);
  rect(0, 0, punchingbagX, 480);
}
var startPose;
// A function to draw the skeletons
function drawSkeleton() {
  // Loop through all the skeletons detected
  if (0 < poses.length) {
    startPose = poses[0]
    let skeleton = poses[0].skeleton;
    print(poses[0].skeleton);
    // For every skeleton, loop through all body connections
    for (let j = 0; j < skeleton.length; j++) {
      let partA = skeleton[j][0];
      let partB = skeleton[j][1];
      stroke(255, 0, 0);
      line(partA.position.x, partA.position.y, partB.position.x, partB.position.y);
      strokeWeight(10);
      if (partA.position.x <= 100 || partB.position.x <= 100) {
        score++;
      }
    }
  }
}
